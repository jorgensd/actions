name: Install DOLFINx
description: Install DOLFINx from source

inputs:
  dolfinx-repository:
    description: "Repository of DOLFINx"
    required: false
    default: "FEniCS/dolfinx"
  ufl-repository:
    description: "Repository of UFL"
    required: false
    default: "FEniCS/ufl"
  ffcx-repository:
    description: "Repository of UFL"
    required: false
    default: "FEniCS/ffcx"
  basix-repository:
    description: "Repository of Basix"
    required: false
    default: "FEniCS/basix"
  dolfinx:
    description: "Branch of DOLFINx"
    required: false
    default: "main"
  ufl:
    description: "Branch of UFL"
    required: false
    default: "main"
  ffcx:
    description: "Branch of FFCx"
    required: false
    default: "main"
  basix:
    description: "Branch of Basix"
    required: false
    default: "main"
  petsc_dir:
    description: "PETSc Directory"
    required: false
    default: "/usr/local/petsc"
  petsc_arch:
    description: "PETSc Arch"
    required: false
    default: "linux-gnu-real-32"
  build_mode:
    description: "Mode to build Basix and DOLFINx"
    required: false
    default: "Release"
  adios2:
    description: "ADIOS2 version/branch"
    required: false
    default: "default"
  working-directory:
    description: "Working directory"
    required: false
    default: "."

runs:
  using: composite

  steps:
    - name: Get Basix
      uses: actions/checkout@v4
      with:
        path: ${{ inputs.working-directory }}/basix
        repository: ${{ inputs.basix-repository }}
        ref: ${{ inputs.basix }}

    - name: Get DOLFINx
      uses: actions/checkout@v4
      with:
        path: ${{ inputs.working-directory }}/dolfinx
        repository: ${{ inputs.dolfinx-repository }}
        ref: ${{ inputs.dolfinx }}

    - name: Get pip flags based on version
      id: python-version
      shell: bash -el {0}
      run: |
        MODERN_PIP=$(python3 -c "import sys; t = sys.version_info >= (3, 11, 0); sys.stdout.write(str(t))")
        if [ ${MODERN_PIP} == "True" ]; then
          FLAGS="--break-system-packages"
        else
          FLAGS=""
          python3 -m pip install --upgrade pip
        fi
        echo "PYTHON_FLAGS=${FLAGS}" >> "$GITHUB_OUTPUT"

    - name: Install UFL, Basix, FFCx
      working-directory: ${{ inputs.working-directory }}
      shell: bash -el {0}
      run: |
        cmake -G Ninja -B build-basix -DCMAKE_BUILD_TYPE="Release" -S ./basix/cpp/
        cmake --build build-basix --parallel 2
        cmake --install build-basix
        python3 -m pip install ${{ steps.python-version.outputs.PYTHON_FLAGS }} nanobind scikit-build-core[pyproject] mpi4py
        python3 -m pip -v install ${{ steps.python-version.outputs.PYTHON_FLAGS }} --check-build-dependencies --config-settings=build-dir="build-basix-python" --config-settings=cmake.build-type=${{ inputs.build_mode }} --config-settings=install.strip=false --no-build-isolation ./basix/python
        python3 -m pip install ${{ steps.python-version.outputs.PYTHON_FLAGS }} git+https://github.com/${{ inputs.ufl-repository }}.git@${{ inputs.ufl }}
        python3 -m pip install ${{ steps.python-version.outputs.PYTHON_FLAGS }} git+https://github.com/${{ inputs.ffcx-repository }}.git@${{ inputs.ffcx }}

    - name: Install adios2
      if: ${{ inputs.adios2 != 'default' }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash -el {0}
      run: |
        git clone --branch=${{ inputs.adios2 }} --single-branch https://github.com/ornladios/ADIOS2.git adios2
        cmake -G Ninja -DADIOS2_USE_HDF5=on -DADIOS2_USE_Python=on -DADIOS2_USE_Fortran=off -DBUILD_TESTING=off -DADIOS2_BUILD_EXAMPLES=off -DADIOS2_USE_ZeroMQ=off -DCMAKE_INSTALL_PYTHONDIR="lib"  -DCMAKE_BUILD_TYPE="Release" -B build-dir-adios2 -S ./adios2
        cmake --build build-dir-adios2 --parallel 2
        cmake --install build-dir-adios2

    - name: Configure C++ (DOLFINx)
      working-directory: ${{ inputs.working-directory }}
      shell: bash -el {0}
      run: PETSC_DIR=${{ inputs.petsc_dir }} PETSC_ARCH=${{ inputs.petsc_arch }} cmake -G Ninja -DCMAKE_BUILD_TYPE=${{ inputs.build_mode }} -B build-dolfinx -S ./dolfinx/cpp/

    - name: Build and install C++ library (dolfinx)
      shell: bash -el {0}
      working-directory: ${{ inputs.working-directory }}
      run: |
        cmake --build build-dolfinx
        cmake --install build-dolfinx

    - name: Build Python interface (DOLFINx)
      working-directory: ${{ inputs.working-directory }}
      shell: bash -el {0}
      run: |
        python3 -m pip install ${{ steps.python-version.outputs.PYTHON_FLAGS }} -r ./dolfinx/python/build-requirements.txt
        PETSC_DIR=${{ inputs.petsc_dir }} PETSC_ARCH=${{ inputs.petsc_arch }} python3 -m pip -v install --check-build-dependencies ${{ steps.python-version.outputs.PYTHON_FLAGS }} --no-build-isolation --no-dependencies  ./dolfinx/python/
